#!/usr/bin/perl
# Copyright 2012, Tim Henigan <tim.henigan@gmail.com>
#
# Perform a directory diff between commits in the repository using
# the external diff or merge tool specified in the user's config.

use 5.008;
use strict;
use warnings;
use File::Basename qw(dirname);
use File::Copy;
use File::stat;
use File::Path qw(mkpath);
use File::Temp qw(tempdir);
use Getopt::Long qw(:config pass_through);
use Git;

sub usage {
	print STDERR <<USAGE;
git diffall [-x|--extcmd=<command>] <commit>{0,2} [--] [<path>...]

    -x=<command>
    --extcmd=<command>  Specify a custom command for viewing diffs.
                 git-diffall ignores the configured defaults and
                 runs \$command \$LOCAL \$REMOTE when this option is
                 specified.

    All other command-line options and arguments will be passed
    through to the underlying diff command (git diff --raw).
USAGE
	exit(1);
}

my $extcmd;
my $help = 0;
GetOptions('h|help' => \$help, 'x|extcmd=s' => \$extcmd);
my $tmpdir = shift or die "No temp dir specified!\n";

usage() if ($help);

# Verify that an external tool has been configured
my $difftool = Git::config('diff.tool');
my $mergetool = Git::config('merge.tool');
unless (defined($extcmd)) {
	unless (defined($difftool) or defined($mergetool)) {
		print("If '--extcmd' is not used, then 'diff.tool' or 'merge.tool' option must be set!\n");
		usage();
	}
}

# Run the diff; exit immediately if no diff found
my $repo = Git->repository();
my $diffrtn = $repo->command_oneline(['diff', '--raw', '--no-abbrev', '-z', @ARGV]);
exit(1) if (length($diffrtn) == 0);

# Setup temp directories
my $ldir = "$tmpdir/left";
my $rdir = "$tmpdir/right";
mkpath($ldir) or die $!;
mkpath($rdir) or die $!;

# Build index info for left and right sides of the diff
my $submodule_mode = "160000";
my $null_mode = 0 x 6;
my $null_sha1 = 0 x 40;
my $lindex = "";
my $rindex = "";
my @working_tree;
my %submodule;
my @rawdiff = split('\0', $diffrtn);

for (my $i=0; $i<@rawdiff; $i+=2) {
	my ($lmode, $rmode, $lsha1, $rsha1, $status) = split(' ', substr($rawdiff[$i], 1));
	my $path = $rawdiff[$i + 1];

	if (($lmode eq $submodule_mode) or ($rmode eq $submodule_mode)) {
		$submodule{$path}{left} = $lsha1;
		$submodule{$path}{right} = $rsha1;
		next;
	}

	if ($lmode ne $null_mode) {
		$lindex .= "$lmode $lsha1\t$path\0";
	}

	if ($rmode ne $null_mode) {
		if ($rsha1 ne $null_sha1) {
			$rindex .= "$rmode $rsha1\t$path\0";
		} else {
			push(@working_tree, $path);
		}
	}
}

# Populate the left and right directories
my ($inpipe, $ctx);
$ENV{GIT_INDEX_FILE} = "$tmpdir/lindex";
($inpipe, $ctx) = $repo->command_input_pipe(qw/update-index -z --index-info/);
print($inpipe $lindex);
$repo->command_close_pipe($inpipe, $ctx);
$repo->command_oneline(["checkout-index", "-a", "--prefix=$ldir/"]);

$ENV{GIT_INDEX_FILE} = "$tmpdir/rindex";
($inpipe, $ctx) = $repo->command_input_pipe(qw/update-index -z --index-info/);
print($inpipe $rindex);
$repo->command_close_pipe($inpipe, $ctx);
$repo->command_oneline(["checkout-index", "-a", "--prefix=$rdir/"]);

# Changes in the working tree need special treatment since they are
# not part of the index
my $workdir = $repo->wc_path();
for (@working_tree) {
	my $dir = dirname($_);
	unless (-d "$rdir/$dir") {
		mkpath("$rdir/$dir") or die $!;
	}
	copy("$workdir/$_", "$rdir/$_") or die $!;
	chmod(stat("$workdir/$_")->mode, "$rdir/$_") or die $!;
}

# Changes to submodules require special treatment. This loop writes a
# temporary file to both the left and right directories to show the
# change in the recorded SHA1 for the submodule.
foreach my $path (keys %submodule) {
	if (defined $submodule{$path}{left}) {
		open(SUBMOD, ">$ldir/$path") or die $!;
		print(SUBMOD "Subproject commit $submodule{$path}{left}");
		close(SUBMOD);
	}
	if (defined $submodule{$path}{right}) {
		open(SUBMOD, ">$rdir/$path") or die $!;
		print(SUBMOD "Subproject commit $submodule{$path}{right}");
		close(SUBMOD);
	}
}

# If '--extcmd' was given, run the specified tool and then exit
# with a non-zero exit code.  This tells the caller that it does
# not need to execute any other tools.
if (defined($extcmd)) {
	system("$extcmd $ldir $rdir");
	exit(1);
}
